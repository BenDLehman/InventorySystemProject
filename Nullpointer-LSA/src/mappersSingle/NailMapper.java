package mappersSingle;

import java.util.ArrayList;

import datasource.InventoryItemDTO;
import datasource.NailDTO;
import datasourceSingle.InventoryItemsGateway;
import exception.DatabaseException;
import sharedDomain.Nail;
import sharedDomain.NailAbstract;
import sharedDomain.Nail;
/**
 * @author Chris Roadcap
 * @author Kanza Amin
 */

public class NailMapper extends NailAbstract
{
	
	final static int NAIL_TYPE = 3;
	private InventoryItemsGateway inventoryItemsGateway;
	private Nail nail;
	
	/**
	 * Find constructor of NailMapper
	 * @param nailID - the ID if the item (nail) in the database
	 * @throws Exception
	 */
	public NailMapper(int nailID) throws Exception 
	{
		this.inventoryItemsGateway = new InventoryItemsGateway(nailID);
		this.buildNail();
	}
	
	
	/**
	 * Create constructor of NailMapper
	 * @param upc the upc of the item
	 * @param manufacturerID the manufacturer ID of the item
	 * @param price the price of the item
	 * @param length the length of the nail
	 * @param numberInBox the number of nails in a box
	 * @throws Exception
	 */
	public NailMapper(String upc, int manufacturerID, int price, double length, int numberInBox) throws Exception 
	{
		this.inventoryItemsGateway = new InventoryItemsGateway(upc, manufacturerID, price, length, numberInBox);
		this.buildNail();

	}

	/**
	 * Finds all Nails that exist in the database, and creates Nail objects using the data in the 
	 * database
	 * @return an array list of all nails that exist in the database
	 * @throws DatabaseException
	 */
	public static ArrayList<Nail> findAll() throws DatabaseException
	{
		ArrayList<InventoryItemDTO> temp = InventoryItemsGateway.findAllByType(NAIL_TYPE);
	
		ArrayList<NailDTO> dtos = new ArrayList<NailDTO>();
		ArrayList<Nail> nails = new ArrayList<Nail>();

		for (int i = 0; i < temp.size(); i++)
		{
			dtos.add((NailDTO) temp.get(i));
			nails.add(new Nail(dtos.get(i).getId(), dtos.get(i).getUpc(), dtos.get(i).getManufacturerID(), dtos.get(i).getPrice(),
					dtos.get(i).getLength(), dtos.get(i).getNumberInBox()));
		}
		return nails;
	}

	/**
	 * Saves updated attributes of a nail object to the database
	 */
	@Override
	public void persist() throws DatabaseException
	{
		inventoryItemsGateway.setUPC(nail.getUpc());
		inventoryItemsGateway.setManID(nail.getManufacturerID());
		inventoryItemsGateway.setPrice(nail.getPrice());
		inventoryItemsGateway.setLength(nail.getLength());
		inventoryItemsGateway.setNumberInBox(nail.getNumberInBox());
		inventoryItemsGateway.persist();
		
	}

	/**
	 * Deletes the item from the database
	 */
	@Override
	public void delete() throws DatabaseException
	{
		inventoryItemsGateway.deleteInventoryItem();
		
	}

	/**
	 * returns the nail instance variable
	 */
	@Override
	public Nail getNail() 
	{
		return nail;
	}

	/**
	 * creates an instance of a nail, and assigns it to the instance variable of nail
	 */
	@Override
	protected void buildNail() 
	{
		nail = new Nail(inventoryItemsGateway.getAutoGeneratedID(), inventoryItemsGateway.getUPC(), inventoryItemsGateway.getManID(), 
				inventoryItemsGateway.getPrice(), inventoryItemsGateway.getLength(), inventoryItemsGateway.getNumberInBox());
		
	}

/**
 * returns the autogenerated id of the item in the database 
 */
	@Override
	public int getNailID() 
	{
		return inventoryItemsGateway.getAutoGeneratedID();
	}


	
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

