package mappersSingle;

import java.util.ArrayList;

import datasource.InventoryItemDTO;
import datasource.PowerToolDTO;
import datasource.ToolDTO;
import datasourceSingle.InventoryItemsGateway;
import datasource.ToolDTO;
import exception.DatabaseException;
import sharedDomain.Tool;
import sharedDomain.ToolAbstract;
/**
 * @author Chris Roadcap
 * @author Kanza Amin
 */

public class ToolMapper extends ToolAbstract
{
	final static int TOOL_TYPE = 1;
	private InventoryItemsGateway inventoryItemsGateway;
	private Tool tool;
	
	/**
	 * Find constructor
	 * @param toolID the ID of the tool in the database
	 * @throws Exception
	 */
	public ToolMapper(int toolID) throws Exception
	{
		this.inventoryItemsGateway = new InventoryItemsGateway(toolID);
		this.buildTool();
		
	}
	
	/**
	 * Create Constructor
	 * @param upc the upc of the tool
	 * @param manufacturerID the manufacturer ID of the tool
	 * @param price the price of the tool
	 * @param description the description of the tool
	 * @throws Exception
	 */
	public ToolMapper(String upc, int manufacturerID, int price, String description) throws Exception
	{
		this.inventoryItemsGateway = new InventoryItemsGateway(upc, manufacturerID, price, description);
		this.buildTool();
	}
	
	
	
	/**
	 * Finds all tools that exist in the database
	 * @return An array list that contains instances of all tools held in the database
	 * @throws DatabaseException
	 */
	public static ArrayList<Tool> findAll() throws DatabaseException
    {
        ArrayList<InventoryItemDTO> temp = InventoryItemsGateway.findAllByType(TOOL_TYPE);
        ArrayList<ToolDTO> dtos = new ArrayList<ToolDTO>();
        ArrayList<Tool> tools = new ArrayList<Tool>();
        
        for(int i = 0; i < temp.size(); i++)
        {
        	dtos.add((ToolDTO) temp.get(i));
            tools.add(new Tool(dtos.get(i).getId(), dtos.get(i).getUpc(), dtos.get(i).getManufacturerID(),
                           dtos.get(i).getPrice(),dtos.get(i).getDescription()));
        }
        return tools;
    }
	

	
	
	/**
	 * Saves changes made to the tool to the database
	 */
	@Override
	public void persist() 
	{   
		inventoryItemsGateway.setUPC(tool.getUpc());
		inventoryItemsGateway.setManID(tool.getManufacturerID());
		inventoryItemsGateway.setPrice(tool.getPrice());
		inventoryItemsGateway.setDesc(tool.getDescription());
		try 
		{
			inventoryItemsGateway.persist();
		}
		catch (Exception e) 
		{
			
			e.printStackTrace();
		}
		
	}   

	
	/**
	 * Deletes the Tool  from the database
	 */
	@Override
	public void delete() 
	{
		try 
		{
			inventoryItemsGateway.deleteInventoryItem();
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

/**
 * @return the instance of tool stored by the class as an instance variable
 */
	@Override
	public Tool getTool() {
		return this.tool;
	}

/**
 * constructs and the instance of tool stored by the class as an instance variable
 */
	@Override
	protected void buildTool() 
	{
		tool = new Tool(inventoryItemsGateway.getAutoGeneratedID(), inventoryItemsGateway.getUPC(), inventoryItemsGateway.getManID(),
				inventoryItemsGateway.getPrice(), inventoryItemsGateway.getDesc());
		
	}

/**
 * @return the ID of the tool
 */
	@Override
	public int getToolID() 
	{
		return this.tool.getID();
	}
	

}
