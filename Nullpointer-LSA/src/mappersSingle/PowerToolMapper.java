package mappersSingle;

import java.util.ArrayList;

import datasource.InventoryItemDTO;
import datasource.PowerToolDTO;
import datasource.PowerToolToStripNailDTO;
import datasourceSingle.PowerToolsToStripNailsGateway;
import datasourceSingle.InventoryItemsGateway;
import exception.DatabaseException;
import mappersSingle.StripNailMapper;
import sharedDomain.PowerTool;
import sharedDomain.PowerToolAbstract;
import sharedDomain.StripNail;
/**
 * @author Chris Roadcap
 * @author Kanza Amin
 */

public class PowerToolMapper extends PowerToolAbstract
{
	final static int POWERTOOL_TYPE = 2;
	private InventoryItemsGateway inventoryItemsGateway;
	private PowerTool powerTool;

	/**
	 * Find Constructor
	 * 
	 * @param inventoryItemID
	 * @throws DatabaseException
	 */
	public PowerToolMapper(int inventoryItemID) throws DatabaseException
	{
		this.inventoryItemsGateway = new InventoryItemsGateway(inventoryItemID);
		this.buildPowerTool();
	}

	/**
	 * Create Constructor
	 * 
	 * @param upc
	 * @param manufacturerID
	 * @param price
	 * @param description
	 * @param batteryPowered
	 * @throws DatabaseException
	 */
	public PowerToolMapper(String upc, int manufacturerID, int price, String description, boolean batteryPowered)
			throws DatabaseException
	{
		this.inventoryItemsGateway = new InventoryItemsGateway(upc, manufacturerID, price, description, batteryPowered);
		this.buildPowerTool();
	}

	/**
	 * Returns all PowerTools
	 * 
	 * @return
	 * @throws DatabaseException
	 */
	public static ArrayList<PowerTool> findAll() throws DatabaseException
	{
		ArrayList<InventoryItemDTO> temp = InventoryItemsGateway.findAllByType(POWERTOOL_TYPE);
		ArrayList<PowerToolDTO> dtos = new ArrayList<PowerToolDTO>();
		ArrayList<PowerTool> powerTools = new ArrayList<PowerTool>();

		for (int i = 0; i < temp.size(); i++)
		{
			dtos.add((PowerToolDTO) temp.get(i));
			powerTools.add(new PowerTool(dtos.get(i).getId(), dtos.get(i).getUpc(), dtos.get(i).getManufacturerID(), dtos.get(i).getPrice(),
					dtos.get(i).getDescription(), dtos.get(i).isBatteryPowered()));
		}
		return powerTools;
	}




	/**
	 * Saves changes made to the object to the database
	 */
	public void persist() throws DatabaseException
	{
		inventoryItemsGateway.setUPC(powerTool.getUpc());
		inventoryItemsGateway.setManID(powerTool.getManufacturerID());
		inventoryItemsGateway.setPrice(powerTool.getPrice());
		inventoryItemsGateway.setDesc(powerTool.getDescription());
		inventoryItemsGateway.setBatteryPowered(powerTool.isBatteryPowered());
		inventoryItemsGateway.persist();
	}

	/**
	 * Deletes a the powertool from the database
	 * 
	 * @throws DatabaseException
	 */
	public void delete() throws DatabaseException
	{
		inventoryItemsGateway.deleteInventoryItem();
	}

	/**
	 * Returns the instance of PowerTool stored as an instance variable
	 * 
	 */
	public PowerTool getPowerTool() 
	{
		return powerTool;
	}

	/**
	 * Constructs an ArrayList of StripNails that correspond to a particular powertool
	 * @return an array list of stripnails that are compatible with the powertool
	 */
	public ArrayList<StripNail> getStripNails() throws DatabaseException 
	{
		ArrayList<StripNail> stripNails = new ArrayList<StripNail>();
		
		ArrayList<PowerToolToStripNailDTO> dtos = PowerToolsToStripNailsGateway.findStripNailByPowerToolID(powerTool.getID());

		try {
		for(int i = 0; i < dtos.size(); i++)
		{
			stripNails.add(new StripNailMapper(dtos.get(i).getStripNailId()).getStripNail());
		}
		}catch(Exception e)
		{}
		return stripNails;
	}

	/**
	 * @return the ID of the powertool
	 */
	public int getPowerToolID() 
	{
		return powerTool.getID();
	}

	/**
	 * constructs the instance of powertool held by the class as an instance variable
	 */
	@Override
	protected void buildPowerTool() 
	{
		powerTool = new PowerTool(inventoryItemsGateway.getAutoGeneratedID(), inventoryItemsGateway.getUPC(), inventoryItemsGateway.getManID(), 
				inventoryItemsGateway.getPrice(), inventoryItemsGateway.getDesc(), inventoryItemsGateway.getBatteryPowered());
	}

	public void addStripNail(StripNail stripNail) throws DatabaseException
	{
		PowerToolsToStripNailsGateway pt2sng = new PowerToolsToStripNailsGateway(powerTool.getID(), stripNail.getID());
		powerTool.getStripNailList().update();
	}
}
