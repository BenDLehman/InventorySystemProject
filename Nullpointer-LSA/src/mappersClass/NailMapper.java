package mappersClass;

import java.util.ArrayList;

import datasource.NailDTO;
import datasourceClass.NailsFastenersInventoryItemsGateway;
import exception.DatabaseException;
import identityMappers.NailIdentityMap;
import sharedDomain.Nail;
import sharedDomain.NailAbstract;

public class NailMapper extends NailAbstract{

	private NailsFastenersInventoryItemsGateway nailGateway;
	protected Nail Nail = null;

	/**
	 * Create constructor of NailMapper
	 * @param upc the upc of the item
	 * @param manufacturerID the manufacturer ID of the item
	 * @param price the price of the item
	 * @param length the length of the nail
	 * @param numberInBox the number of nails in a box
	 * @throws Exception
	 */
	public NailMapper(String upc, int manufacturerID, int price, double length, int numberIn) throws Exception
	{
		this.nailGateway = new NailsFastenersInventoryItemsGateway(upc, manufacturerID, price, length, numberIn);
		this.buildNail();
	}
	
	
	/**
	 * Finds all Nails that exist in the database, and creates Nail objects using the data in the 
	 * database
	 * @return an array list of all nails that exist in the database
	 * @throws DatabaseException
	 */
	public static ArrayList<Nail> findAll() throws DatabaseException
	{
		ArrayList<Nail> Nails = new ArrayList<Nail>();
		ArrayList<NailDTO> NailDTOs = NailsFastenersInventoryItemsGateway.findAll();
		
		NailDTOs.forEach(sn -> 
		{
			try 
			{
				Nails.add(new Nail(sn.getId(),sn.getUpc(), sn.getManufacturerID(), sn.getPrice(), sn.getLength(), sn.getNumberInBox()));
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
			}
		});

		return Nails;
	}
	
	/**
	 * Find constructor of NailMapper
	 * @param nailID - the ID if the item (nail) in the database
	 * @throws Exception
	 */
	public NailMapper(int nailID) throws DatabaseException {
		this.nailGateway = new NailsFastenersInventoryItemsGateway(nailID);
		this.buildNail();
	}

	/**
	 * Saves updated attributes of a nail object to the database
	 */
	public void persist() throws DatabaseException {
		nailGateway.setUPC(Nail.getUpc());
		nailGateway.setManufacturerID(Nail.getManufacturerID());
		nailGateway.setPrice(Nail.getPrice());
		nailGateway.setLength(Nail.getLength());
		nailGateway.setNumberInBox(Nail.getNumberInBox());		
		nailGateway.persist();
	}

	
	/**
	 * Deletes the item from the database
	 */
	public void delete() throws DatabaseException {
		nailGateway.delete();
	}

	/**
	 * returns the nail instance variable
	 */
	public Nail getNail() {
		
		return Nail;
	}

	
	/**
	 * creates an instance of a nail, and assigns it to the instance variable of nail
	 */
	@Override
	protected void buildNail() {
		Nail = new Nail(nailGateway.getInventoryItemID(),nailGateway.getUPC(), nailGateway.getManufacturerID(),
				nailGateway.getPrice(), nailGateway.getLength(), nailGateway.getNumberInBox());		
	}

	
	/**
	 * returns the autogenerated id of the item in the database 
	 */
	@Override
	public int getNailID() {
		
		return this.Nail.getID();
	}
}
