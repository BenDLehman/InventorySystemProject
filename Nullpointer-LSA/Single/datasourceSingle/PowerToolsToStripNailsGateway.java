
package datasourceSingle;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import DatabaseManager.DatabaseManager;
import DatabaseManager.DatabaseManager.dbTables;
import datasource.PowerToolToStripNailDTO;
import exception.DatabaseException;

/**
 * 
 * @author Chris Roadcap
 * @author Kanza Amin
 *
 *         Test Class which tests the functionality of the
 *         PowerToolsToStripNails table There are five methods: findAll(),
 *         PowerToolsToStripNailsGateway(powertoolID, stripnailID),
 *         PowerToolsToStripNailsGateway(ID), insert(), persist() There are
 *         three setters and three getters
 */
public class PowerToolsToStripNailsGateway
{

	/*
	 * FINDS ALL POWERTOOLS AND STRIPNAILS
	 * 
	 * This method finds all PowerTools and StripNails from the table
	 * PowerToolsToStripNails
	 */

	public static ArrayList<PowerToolToStripNailDTO> findAll() throws DatabaseException
	{
		ArrayList<PowerToolToStripNailDTO> resultList = new ArrayList<PowerToolToStripNailDTO>();
		String query = "Select * from PowerToolsToStripNails;";
		DatabaseManager dbm = DatabaseManager.getDatabaseManager();
		try
		{
			PreparedStatement stmnt = dbm.getConnection(dbTables.SINGLE).prepareStatement(query);
			ResultSet result = stmnt.executeQuery();

			while (result.next())
			{
				int powerToolID = result.getInt("powerToolID");
				int stripNailID = result.getInt("stripNailID");

				PowerToolToStripNailDTO temp = new PowerToolToStripNailDTO(powerToolID, stripNailID);

				resultList.add(temp);

			}
		} catch (SQLException e)
		{
			e.printStackTrace();
		}
		return resultList;
	}

	/*
	 * Instance variables
	 */
	private int autoGeneratedID;
	private int powerToolID;
	private int stripNailID;
	private static final int TOOL_TYPE = 1;
	private static final int POWERTOOL_TYPE = 2;
	private static final int NAIL_TYPE = 3;
	private static final int STRIPNAIL_TYPE = 4;

	/*
	 * POWERTOOLSTOSTRIPNAILSGATEWAY CONSTRUCTOR 1
	 * 
	 * Used for inserting values of ptID and snID
	 */
	public PowerToolsToStripNailsGateway(int powerToolID, int stripNailID) throws DatabaseException
	{
		this.powerToolID = powerToolID;
		this.stripNailID = stripNailID;
		
		
		try
		{
			this.insert();
		} catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	/*
	 * POWERTOOLSTOSTRIPNAILSGATEWAY CONSTRUCTOR 2
	 * 
	 * Used for getting a specific pair of powertools and stripnails using AutoID
	 */
	public PowerToolsToStripNailsGateway(int ID) throws SQLException, DatabaseException
	{
		String query = "Select * from PowerToolsToStripNails where autoID = ?";
		ResultSet result;

		PreparedStatement stmnt = DatabaseManager.getDatabaseManager().getConnection(dbTables.SINGLE)
				.prepareStatement(query);
		stmnt.setInt(1, ID);
		result = stmnt.executeQuery();
		result.next();

		this.setAutoGeneratedID(result.getInt("autoID"));
		this.setPowerToolID(result.getInt("powerToolID"));
		this.setStripNailID(result.getInt("stripNailID"));
	}

	/*
	 * Setters and Getters
	 */
	public void setAutoGeneratedID(int ID)
	{
		this.autoGeneratedID = ID;
	}

	public int getAutoGeneratedID()
	{
		return this.autoGeneratedID;
	}

	public int getPowerToolID()
	{
		return powerToolID;
	}

	public void setPowerToolID(int powerToolID)
	{
		this.powerToolID = powerToolID;
	}

	public int getStripNailID()
	{
		return stripNailID;
	}

	public void setStripNailID(int stripNailID)
	{
		this.stripNailID = stripNailID;
	}

	public static void main(String[] args)
	{

	}

	/*
	 * INSERT METHOD
	 * 
	 * This function inserts a powertool id and stripnail id into the
	 * PowerToolsToStripNails table
	 * 
	 */
	private void insert() throws DatabaseException
	{
		try
		{
			if (SingleTableHelper.findItem(this.powerToolID) != null
					&& SingleTableHelper.findItem(this.stripNailID) != null)
			{
				ResultSet ptResult = SingleTableHelper.findItem(this.powerToolID);
				ResultSet snResult = SingleTableHelper.findItem(this.stripNailID);
				ResultSet autoGeneratedKey;
				ptResult.next();
				snResult.next();

				int type1 = ptResult.getInt("type");
				int type2 = snResult.getInt("type");

				if (type1 == POWERTOOL_TYPE && type2 == STRIPNAIL_TYPE)
				{
					DatabaseManager dbm = DatabaseManager.getDatabaseManager();

					String query = "Insert into PowerToolsToStripNails(powerToolID, stripNailID) values(?,?);";
					PreparedStatement stmt = dbm.getConnection(dbTables.SINGLE).prepareStatement(query,
							Statement.RETURN_GENERATED_KEYS);
					stmt.setInt(1, this.powerToolID);
					stmt.setInt(2, this.stripNailID);
					stmt.executeUpdate();
					autoGeneratedKey = stmt.getGeneratedKeys();
					autoGeneratedKey.next();
					this.setAutoGeneratedID(autoGeneratedKey.getInt(1));
				}
			} else
			{
				System.out.println("The Item(s) you entered do not exist in InventoryItems.");
			}
		} catch (SQLException e)
		{
			e.printStackTrace();
		}
	}

	/*
	 * PERSIST METHOD
	 * 
	 * This function updates the PowerToolsToStripNails with new PowerToolID,
	 * StripNailID, using the autoID
	 * 
	 */ public void persist() throws DatabaseException
	{
		String updateQuery = "Update PowerToolsToStripNails " + "Set " + "  powerToolID = ?," + "  stripnailID = ?"
				+ " WHERE" + " autoID = ?;";
		try
		{
			DatabaseManager dbm = DatabaseManager.getDatabaseManager();
			PreparedStatement stmnt = dbm.getConnection(dbTables.SINGLE).prepareStatement(updateQuery);
			stmnt.setInt(1, this.getPowerToolID());
			stmnt.setInt(2, this.getStripNailID());
			stmnt.setInt(3, this.getAutoGeneratedID());
			stmnt.executeUpdate();
		} catch (SQLException e)
		{
			e.printStackTrace();
		}
	}

	public static ArrayList<PowerToolToStripNailDTO> findStripNailByPowerToolID(int powerToolID) 
	{
		String query = "Select stripNailID from PowerToolsToStripNails where powerToolID = ?";
		ResultSet result;
		ArrayList<PowerToolToStripNailDTO> list = new ArrayList<PowerToolToStripNailDTO>();


		try {
			PreparedStatement stmnt = DatabaseManager.getDatabaseManager().getConnection(dbTables.SINGLE)
					.prepareStatement(query);
			stmnt.setInt(1, powerToolID);
			result = stmnt.executeQuery();
			while(result.next())
			{
				list.add(new PowerToolToStripNailDTO(powerToolID, result.getInt("stripNailID")));
			}
			
		} catch (DatabaseException e) 
		{
		} catch (SQLException e) 
		{
		}
		return list;
	}
	
	public static ArrayList<PowerToolToStripNailDTO> findPowerToolByStripNailID(int stripNailID) 
	{
		String query = "Select powerToolID from PowerToolsToStripNails where stripNailID = ?";
		ResultSet result;
		ArrayList<PowerToolToStripNailDTO> list = new ArrayList<PowerToolToStripNailDTO>();


		try {
			PreparedStatement stmnt = DatabaseManager.getDatabaseManager().getConnection(dbTables.SINGLE)
					.prepareStatement(query);
			stmnt.setInt(1, stripNailID);
			result = stmnt.executeQuery();
			while(result.next())
			{
				list.add(new PowerToolToStripNailDTO(result.getInt("powerToolID"), stripNailID));
			}
			
		} catch (DatabaseException e) 
		{
		} catch (SQLException e) 
		{
		}
		return list;
	}

}
