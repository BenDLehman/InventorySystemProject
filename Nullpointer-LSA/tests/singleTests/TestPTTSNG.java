package singleTests;
import static org.junit.jupiter.api.Assertions.*;

import java.sql.SQLException;
import java.sql.Savepoint;
import java.util.ArrayList;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import DatabaseManager.DatabaseManager;
import DatabaseManager.DatabaseManager.dbTables;
import datasource.*;
import datasourceSingle.*;

/**
 * 
 * @author Chris Roadcap
 * @author Kanza Amin
 *
 *Test Class which tests the functionality if the PowerToolsToStripNails Gateway
 */
class TestPTTSNG {

	DatabaseManager dbm;
	java.sql.Connection connection = null;
	
	
	
	 /**
	  * Creates tables before every test, if they don't already exist
	 * @throws Exception  when communications with the database fail/ improper database syntax
	 */
	@BeforeEach
     void setUpTests() throws Exception
  {
  	SingleTableHelper.createInventoryItems();
  	SingleTableHelper.createPowerToolsToStripNails();
  	SingleTableHelper.createInventoryView();
  	
		try {
			dbm = DatabaseManager.getDatabaseManager();
			connection = dbm.getConnection(dbTables.SINGLE);
			connection.setAutoCommit(false);
		
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}

  }
	 
    /**
	 * Resets the database to empty after each test 
	 * @throws Exception  when communications with the database fail/ improper database syntax
	 */
	@AfterEach
	    void afterTests() throws Exception
	    {
			connection.rollback();
	    }
	
	

	/**
	 * Tests the Create and Find Constructors function as intended
	 * @throws Exception  when communications with the database fail/ improper database syntax
	 */
	@Test
	void testCreateAndFindConstructors() throws Exception {
		
		
		//Creates a power tool and a strip nail
		InventoryItemsGateway powerTool = new InventoryItemsGateway("abc2",4,5,"powertool description",true);
		InventoryItemsGateway stripNail = new InventoryItemsGateway("abc4", 2,7, 6, 3.5);
		
		
		//creates an association between the powertool and strip nail
		PowerToolsToStripNailsGateway ptsn = new PowerToolsToStripNailsGateway(powerTool.getAutoGeneratedID(),stripNail.getAutoGeneratedID());
		
		
		//asserts the correct data exists in the gateway
		assertEquals(powerTool.getAutoGeneratedID(),  ptsn.getPowerToolID());
		assertEquals(stripNail.getAutoGeneratedID(), ptsn.getStripNailID());
		PowerToolsToStripNailsGateway find = new PowerToolsToStripNailsGateway(ptsn.getAutoGeneratedID());
		assertEquals(powerTool.getAutoGeneratedID(), find.getPowerToolID());
		assertEquals(stripNail.getAutoGeneratedID(), find.getStripNailID());
		

	}
	/**
	 * Tests the findAll method functions properly and returns all items in the table
	 * @throws Exception  when communications with the database fail/ improper database syntax
	 */
	@Test
	void testFindAll() throws Exception 
	{
		//Creates a powertool and a strip nail
		InventoryItemsGateway powertool = new InventoryItemsGateway("upc1", 1, 10, "Powertool", true);
		InventoryItemsGateway stripnail = new InventoryItemsGateway("upc1", 1, 10, 10, 2.5);

		//creates an association between the powertool and stripnail
		PowerToolsToStripNailsGateway p = new PowerToolsToStripNailsGateway(powertool.getAutoGeneratedID(), stripnail.getAutoGeneratedID());

		//stores dtos representing all items in the table
		ArrayList<PowerToolToStripNailDTO> testResult = new ArrayList<PowerToolToStripNailDTO>();

		testResult = PowerToolsToStripNailsGateway.findAll();

		//Asserts the data exists in the table, as well as only one one item (all in this case) were retrieved
		assertEquals(powertool.getAutoGeneratedID(), testResult.get(0).getPowerToolId());
		assertEquals(stripnail.getAutoGeneratedID(), testResult.get(0).getStripNailId());
		assertEquals(1, testResult.size());
	}
	
	/**
	 * Tests the persist method functions appropriately by updating existing values in the database
	 * @throws Exception when communications with the database fail/ improper database syntax
	 */
	@Test
	void testPersis() throws Exception
	{
		
		//Creates 2 powertools
		InventoryItemsGateway powertool = new InventoryItemsGateway("upc1", 1, 10, "Powertool", true);
		InventoryItemsGateway powertool2 = new InventoryItemsGateway("upc2", 1, 10, "Powertool2", false);
		
		
		//creates 2 strip nails
		InventoryItemsGateway stripnail = new InventoryItemsGateway("upc1", 1, 10, 10, 2.5);
		InventoryItemsGateway stripnail2 = new InventoryItemsGateway("upc2", 1, 4, 5, 3.5);
		
		//creates association between powertool and stip nail
		PowerToolsToStripNailsGateway gateway = new PowerToolsToStripNailsGateway(powertool.getAutoGeneratedID(), stripnail.getAutoGeneratedID());
		
		//changes values of the instance variables
		gateway.setPowerToolID(powertool2.getAutoGeneratedID());
		gateway.setStripNailID(stripnail2.getAutoGeneratedID());
		
		
		//updates values in the database
		gateway.persist();
		
		
		//finds the row that was altered
		PowerToolsToStripNailsGateway finder = new PowerToolsToStripNailsGateway(gateway.getAutoGeneratedID());
		
		
		//asserts the changes were saved to the database.
		assertEquals(stripnail2.getAutoGeneratedID(), finder.getStripNailID());
		assertEquals(powertool2.getAutoGeneratedID(), finder.getPowerToolID());
	}
}
