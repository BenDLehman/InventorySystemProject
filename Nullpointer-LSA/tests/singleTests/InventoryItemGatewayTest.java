package singleTests;
import static org.junit.Assert.assertNotNull;
import static org.junit.jupiter.api.Assertions.*;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.util.ArrayList;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.mysql.jdbc.Connection;

import DatabaseManager.DatabaseManager;
import DatabaseManager.DatabaseManager.dbTables;
import datasource.*;
import datasourceSingle.*;
import exception.DatabaseException;

/**
 * 
 * @author Chris Roadcap
 * @author Kanza Amin
 *
 *Test Class which tests the functionality of the InventoryItemGateway
 */

class InventoryItemGatewayTest {
	 /**
	  * Creates tables before every test, if they don't already exist
	 * @throws Exception  when communications with the database fail/ improper database syntax
	 */

	   DatabaseManager dbm;
       java.sql.Connection connection = null;
    @BeforeEach
       void setUpTests() throws Exception
    {
    	//SingleTableHelper.cleanDB();
    	SingleTableHelper.createInventoryItems();
    	SingleTableHelper.createPowerToolsToStripNails();
    	SingleTableHelper.createInventoryView();
    	
		try {
			dbm = DatabaseManager.getDatabaseManager();
			connection = dbm.getConnection(dbTables.SINGLE);
			connection.setAutoCommit(false);
		
			
			
		} catch (Exception e) {
			
		}

    }
    /**
   	 * Resets the database to empty after each test 
   	 * @throws Exception  when communications with the database fail/ improper database syntax
   	 */

    @AfterEach
    void afterTests() throws Exception
    {
		try {
			
			connection.rollback();	
		} catch (SQLException e) {
			// TODO Auto-generated catch block
		}
    }
    /**
	 * Tests the Create Contructors and Getters
	 * @throws Exception  when communications with the database fail/ improper database syntax
	 */

	@Test
	void testConstructorsAndGetters() throws Exception 
	{
		//creates a tool and tests the toop gets it's upc, manid, price, and description
		InventoryItemsGateway tool = new InventoryItemsGateway("abc", 2, 3,"description");
		assertNotNull(tool);
    	assertEquals("abc", tool.getUPC());
    	assertEquals(2, tool.getManID());
    	assertEquals(3, tool.getPrice());
    	assertEquals("description", tool.getDesc());
    	
		//creates a tool and tests the toop gets it's upc, manid, price, description, and if it's batteryPowered
    	InventoryItemsGateway powerTool = new InventoryItemsGateway("abc",2,3,"description",true);
    	assertNotNull(powerTool);
    	assertEquals("abc", powerTool.getUPC());
    	assertEquals(2, powerTool.getManID());
    	assertEquals(3, powerTool.getPrice());
    	assertEquals("description", powerTool.getDesc());
    	assertEquals(true, powerTool.getBatteryPowered());
    	
		//creates a tool and tests the toop gets it's upc, manid, price, length, and numberInBox
    	InventoryItemsGateway nail = new InventoryItemsGateway("upc", 2,3, 2.5, 5);
    	assertNotNull(nail);
    	assertEquals("upc", nail.getUPC());
    	assertEquals(2, nail.getManID());
    	assertEquals(3, nail.getPrice());
    	assertEquals(2.5, nail.getLength(), .1);
    	assertEquals(5, nail.getNumberInBox());
    	
		//creates a tool and tests the toop gets it's upc, manid, price, length, and numberInStrip
    	InventoryItemsGateway stripNail = new InventoryItemsGateway("upc", 2,3, 5, 3.5);
    	assertNotNull(stripNail);
    	assertEquals("upc", stripNail.getUPC());
    	assertEquals(2, stripNail.getManID());
    	assertEquals(3, stripNail.getPrice());
    	assertEquals(3.5, stripNail.getLength(), .1);
    	assertEquals(5, stripNail.getNumberInStrip());
		
	}
	/**
	 * Tests the Create and Find Constructors to function as intended
	 * @throws Exception  when communications with the database fail/ improper database syntax
	 */

	@Test
	void testCreateAndFindConstructors() throws Exception
	{
		//creates a tool, powertool, nail, and stripnail
		InventoryItemsGateway tool = new InventoryItemsGateway("abc1", 1, 3,"tool description");
		InventoryItemsGateway powerTool = new InventoryItemsGateway("abc2",4,5,"powertool description",true);
		InventoryItemsGateway nail = new InventoryItemsGateway("abc3", 2,3, 2.5, 5);
		InventoryItemsGateway stripNail = new InventoryItemsGateway("abc4", 2,7, 6, 3.5);
		 
		
		//create 2 instances of PowerToolsToStripNailsGateway and tests the new ID's
		PowerToolsToStripNailsGateway pttsn = new PowerToolsToStripNailsGateway(powerTool.getAutoGeneratedID(),stripNail.getAutoGeneratedID());
		PowerToolsToStripNailsGateway newgw = new PowerToolsToStripNailsGateway(pttsn.getAutoGeneratedID());
		newgw.setPowerToolID(99999999);
		newgw.setStripNailID(88888888);
		newgw.persist();
		
		//creates find instances of InventoryItemsGateay that get each type's ID
		InventoryItemsGateway findTool = new InventoryItemsGateway(tool.getAutoGeneratedID());
		InventoryItemsGateway findPowerTool = new InventoryItemsGateway(powerTool.getAutoGeneratedID());
		InventoryItemsGateway findNail = new InventoryItemsGateway(nail.getAutoGeneratedID());
		InventoryItemsGateway findStripNail= new InventoryItemsGateway(stripNail.getAutoGeneratedID());
		
		//tests each find instance gets the correlated UPC in the items made above
		assertEquals("abc1", findTool.getUPC());
		assertEquals("abc2", findPowerTool.getUPC());
		assertEquals("abc3", findNail.getUPC());
		assertEquals("abc4", findStripNail.getUPC());
	}
	/**
	 * Tests the persist method functions appropriately by updating existing values in the database
	 * @throws Exception when communications with the database fail/ improper database syntax
	 */

	@Test
	void testPersist() throws Exception
	{
		//creates a tool, powertool, nail, and stripnail
		InventoryItemsGateway tool = new InventoryItemsGateway("abc1", 1, 3,"tool description");
		InventoryItemsGateway powerTool = new InventoryItemsGateway("abc2",4,5,"powertool description",true);
		InventoryItemsGateway nail = new InventoryItemsGateway("abc3", 2,3, 2.5, 5);
		InventoryItemsGateway stripNail = new InventoryItemsGateway("abc4", 2,7, 6, 3.5);
		
		
		//creates find instances of InventoryItemsGateay that get each type's ID
		InventoryItemsGateway findTool = new InventoryItemsGateway(tool.getAutoGeneratedID());
		InventoryItemsGateway findPowerTool = new InventoryItemsGateway(powerTool.getAutoGeneratedID()); 
		InventoryItemsGateway findNail = new InventoryItemsGateway(nail.getAutoGeneratedID());
		InventoryItemsGateway findStripNail= new InventoryItemsGateway(stripNail.getAutoGeneratedID());
		
		//tests each find instance gets the correlated UPC in the items made above
		assertEquals("abc1", findTool.getUPC());
		assertEquals("abc2", findPowerTool.getUPC());
		assertEquals("abc3", findNail.getUPC());
		assertEquals("abc4",findStripNail.getUPC());
		
		//use the setters as some columns
		findTool.setPrice(20);
		findTool.setDesc("test description");
		
		findPowerTool.setUPC("powerToolUPC");
		findPowerTool.setBatteryPowered(false);
		
		findNail.setLength(3.5);
		findNail.setNumberInBox(65);
		
		findStripNail.setUPC(("stripNailUPC"));
		findStripNail.setNumberInStrip(50);
		
		//updates the changes made from the setters above
		findTool.persist();
		findPowerTool.persist();
		findNail.persist();
		findStripNail.persist();
		
		//creates an updated tool, powertool, nail, and stripnail
		InventoryItemsGateway updatedTool = new InventoryItemsGateway(findTool.getAutoGeneratedID());
		InventoryItemsGateway updatedPowerTool = new InventoryItemsGateway(findPowerTool.getAutoGeneratedID());
		InventoryItemsGateway updatedNail = new InventoryItemsGateway(findNail.getAutoGeneratedID());
		InventoryItemsGateway updatedStripNail = new InventoryItemsGateway(findStripNail.getAutoGeneratedID());
		
		//tests the updated items from above
		assertEquals(20, updatedTool.getPrice());
		assertEquals("test description", updatedTool.getDesc());
		
		assertEquals("powerToolUPC", updatedPowerTool.getUPC());
		assertFalse(updatedPowerTool.getBatteryPowered());
		
		assertEquals(3.5, updatedNail.getLength(), .1);
		assertEquals(65, updatedNail.getNumberInBox());
		
		assertEquals(50, updatedStripNail.getNumberInStrip());
	}
	
	/**
	 * Tests the findAllByManID method functions properly and returns all items in the table
	 * @throws Exception  when communications with the database fail/ improper database syntax
	 */

	@Test
	void testFindAllByManID() throws Exception
	{
		//creates a tool, powertool, nail, and stripnail
		InventoryItemsGateway tool = new InventoryItemsGateway("abc1", 1, 3,"tool description");
		InventoryItemsGateway powerTool = new InventoryItemsGateway("abc2",4,5,"powertool description",true);
		InventoryItemsGateway nail = new InventoryItemsGateway("abc3", 2,3, 2.5, 5);
		InventoryItemsGateway stripNail = new InventoryItemsGateway("abc4", 2,7, 6, 3.5);
		
		
		ArrayList<InventoryItemDTO> list = InventoryItemsGateway.findAllByManID(2);
		
		NailDTO naildto = (NailDTO) list.get(0);
		StripNailDTO stripnaildto =(StripNailDTO) list.get(1);
		//tests each dto gets the manfucactureID from the items above
		assertEquals(2, naildto.getManufacturerID());
		assertEquals(2, stripnaildto.getManufacturerID());
		
	}
	/**
	 * Tests the findAllByPrice method functions properly and returns all items in the table
	 * @throws Exception  when communications with the database fail/ improper database syntax
	 */
	@Test
	void testFindAllByPrice() throws Exception
	{
		//creates a tool, powertool, nail, and stripnail
		InventoryItemsGateway tool = new InventoryItemsGateway("abc1", 1, 3,"tool description");
		InventoryItemsGateway powerTool = new InventoryItemsGateway("abc2",4,5,"powertool description",true);
		InventoryItemsGateway nail = new InventoryItemsGateway("abc3", 2,3, 2.5, 5);
		InventoryItemsGateway stripNail = new InventoryItemsGateway("abc4", 2,7, 6, 3.5);
		
		ArrayList<InventoryItemDTO> list = InventoryItemsGateway.findAllByPrice(3);
		
		ToolDTO tooldto = (ToolDTO) list.get(0);
		NailDTO naildto =  (NailDTO) list.get(1);
	
		//tests each dto gets the price from the items above
		assertEquals(3, tooldto.getPrice());
		assertEquals(3, naildto.getPrice());
	}
	/**
	 * Tests the findAllByType method functions properly and returns all items in the table
	 * @throws Exception  when communications with the database fail/ improper database syntax
	 */
	@Test
	void testFindAllByType() throws Exception
	{
		//creates a tool, powertool, nail, and stripnail
		InventoryItemsGateway tool = new InventoryItemsGateway("abc1", 1, 3,"tool description");
		InventoryItemsGateway powerTool = new InventoryItemsGateway("abc2",4,5,"powertool description",true);
		InventoryItemsGateway nail = new InventoryItemsGateway("abc3", 2,3, 2.5, 5);
		InventoryItemsGateway stripNail = new InventoryItemsGateway("abc4", 2,7, 6, 3.5);
		
		//makes the dtolist for each type
		ArrayList<InventoryItemDTO> toollist = InventoryItemsGateway.findAllByType(1);
		ArrayList<InventoryItemDTO> powertoollist = InventoryItemsGateway.findAllByType(2);
		ArrayList<InventoryItemDTO> naillist = InventoryItemsGateway.findAllByType(3);
		ArrayList<InventoryItemDTO> stripnaillist = InventoryItemsGateway.findAllByType(4);
		 
		//each dtolist is casted to the dto's from the Shared file
		ToolDTO tooldto = (ToolDTO) toollist.get(0);
		PowerToolDTO powerToolDTO = (PowerToolDTO) powertoollist.get(0);
		NailDTO naildto = (NailDTO) naillist.get(0);
		StripNailDTO stripnaildto = (StripNailDTO) stripnaillist.get(0);
	
		//tests each dto gets the type from the items above
		assertEquals(1, tooldto.getType());
		assertEquals(2, powerToolDTO.getType());
		assertEquals(3, naildto.getType());
		assertEquals(4, stripnaildto.getType());
	}
	/**
	 * Tests the findAllByBatteryPowered method functions properly and returns all items in the table
	 * @throws Exception  when communications with the database fail/ improper database syntax
	 */
	@Test
	public void findAllByBatteryPowered() throws Exception
	{
		//creates a tool, powertool, nail, and stripnail
		InventoryItemsGateway powerTool = new InventoryItemsGateway("abc2",4,5,"powertool description",true);
		InventoryItemsGateway powerTool2 = new InventoryItemsGateway("abc3",5,6,"powertool description2", false);
		
		ArrayList<InventoryItemDTO> powertoollist = InventoryItemsGateway.findAllByBatteryPowered(true);
		ArrayList<InventoryItemDTO> powertoollist2 = InventoryItemsGateway.findAllByBatteryPowered(false);
		
		PowerToolDTO powerTool1DTO = (PowerToolDTO) powertoollist.get(0);
		PowerToolDTO powerTool2DTO = (PowerToolDTO) powertoollist2.get(0);
		
		//tests is the dtos are batterypowered
		assertTrue(powerTool1DTO.isBatteryPowered());
		assertFalse(powerTool2DTO.isBatteryPowered());
	}
	/**
	 * Tests the delete functions of the table and properly and returns all items in the table
	 * @throws Exception  when communications with the database fail/ improper database syntax
	 */
	@Test
	public void testDelete() throws Exception
	{
		//creates a tool, powertool, nail, and stripnail
		InventoryItemsGateway powerTool = new InventoryItemsGateway("abc2",4,5,"powertool description",true);
		InventoryItemsGateway stripNail = new InventoryItemsGateway("abc4", 2,7, 6, 3.5);
		
		InventoryItemsGateway findPowerTool = new InventoryItemsGateway(powerTool.getAutoGeneratedID());
		
		PowerToolsToStripNailsGateway association = new PowerToolsToStripNailsGateway(powerTool.getAutoGeneratedID(),stripNail.getAutoGeneratedID());
		//query to find UPC from  InventoryItems column ID
		String query = "Select UPC from InventoryItems where ID = ?";
		PreparedStatement stmnt = DatabaseManager.getDatabaseManager().getConnection(dbTables.SINGLE).prepareStatement(query);
		stmnt.setInt(1, powerTool.getAutoGeneratedID());
		
		
		ResultSet result = stmnt.executeQuery();
		result.next();
		
		assertEquals("abc2", result.getString("UPC"));
		
		String query2 = "Select * from PowerToolsToStripNails where powerToolID = ? OR stripNailID = ?";
		PreparedStatement stmnt2 = DatabaseManager.getDatabaseManager().getConnection(dbTables.SINGLE).prepareStatement(query2);
		stmnt2.setInt(1, powerTool.getAutoGeneratedID());
		stmnt2.setInt(2, stripNail.getAutoGeneratedID());
		
		ResultSet result2 = stmnt2.executeQuery();
		result2.next();
		assertEquals(result2.getInt("powerToolID"), powerTool.getAutoGeneratedID());
		
		InventoryItemsGateway powerToolFinder = new InventoryItemsGateway(powerTool.getAutoGeneratedID());
		
		powerToolFinder.deleteInventoryItem();
		
			String query3 = "Select UPC from InventoryItems where ID = ?";
			PreparedStatement stmnt3 = DatabaseManager.getDatabaseManager().getConnection(dbTables.SINGLE).prepareStatement(query3);
			stmnt.setInt(1, powerTool.getAutoGeneratedID());
			ResultSet deletedSet = stmnt.executeQuery();
			assertFalse(deletedSet.next());
			
			
			String query4 = "Select * from PowerToolsToStripNails where powerToolID = ? ";
			PreparedStatement stmnt4 = DatabaseManager.getDatabaseManager().getConnection(dbTables.SINGLE).prepareStatement(query4);
			stmnt4.setInt(1, powerTool.getAutoGeneratedID());
			ResultSet deletedSet2 = stmnt4.executeQuery();
			assertFalse(deletedSet2.next());
			
	}

}
